{
  "name": "nodetool-lib-audio",
  "description": "Nodetool Audio nodes",
  "version": "0.6.0",
  "authors": [
    "Matthias Georgi <matti.georgi@gmail.com>"
  ],
  "repo_id": "nodetool-ai/nodetool-lib-audio",
  "nodes": [
    {
      "title": "Bitcrush",
      "description": "Applies a bitcrushing effect to an audio file, reducing bit depth and/or sample rate.\n    audio, effect, distortion\n\n    Use cases:\n    - Create lo-fi or retro-style audio effects\n    - Simulate vintage digital audio equipment\n    - Add digital distortion and artifacts to sounds",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.Bitcrush",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "bit_depth",
          "type": {
            "type": "int"
          },
          "default": 8,
          "title": "Bit Depth",
          "description": "The bit depth to reduce the audio to. Lower values create more distortion.",
          "min": 1.0,
          "max": 16.0
        },
        {
          "name": "sample_rate_reduction",
          "type": {
            "type": "int"
          },
          "default": 1,
          "title": "Sample Rate Reduction",
          "description": "Factor by which to reduce the sample rate. Higher values create more aliasing.",
          "min": 1.0,
          "max": 100.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "bit_depth",
        "sample_rate_reduction"
      ],
      "is_dynamic": false
    },
    {
      "title": "Compress",
      "description": "Applies dynamic range compression to an audio file.\n    audio, effect, dynamics\n\n    Use cases:\n    - Even out volume levels in a recording\n    - Increase perceived loudness of audio\n    - Control peaks in audio signals",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.Compress",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "threshold",
          "type": {
            "type": "float"
          },
          "default": -20.0,
          "title": "Threshold",
          "description": "Threshold in dB above which compression is applied.",
          "min": -60.0,
          "max": 0.0
        },
        {
          "name": "ratio",
          "type": {
            "type": "float"
          },
          "default": 4.0,
          "title": "Ratio",
          "description": "Compression ratio. Higher values result in more compression.",
          "min": 1.0,
          "max": 20.0
        },
        {
          "name": "attack",
          "type": {
            "type": "float"
          },
          "default": 5.0,
          "title": "Attack",
          "description": "Attack time in milliseconds.",
          "min": 0.1,
          "max": 100.0
        },
        {
          "name": "release",
          "type": {
            "type": "float"
          },
          "default": 50.0,
          "title": "Release",
          "description": "Release time in milliseconds.",
          "min": 5.0,
          "max": 1000.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "threshold",
        "ratio",
        "attack",
        "release"
      ],
      "is_dynamic": false
    },
    {
      "title": "Delay",
      "description": "Applies a delay effect to an audio file.\n    audio, effect, time-based\n\n    Use cases:\n    - Create echo effects\n    - Add spaciousness to sounds\n    - Produce rhythmic patterns",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.Delay",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "delay_seconds",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Delay Seconds",
          "description": "Delay time in seconds.",
          "min": 0.01,
          "max": 5.0
        },
        {
          "name": "feedback",
          "type": {
            "type": "float"
          },
          "default": 0.3,
          "title": "Feedback",
          "description": "Amount of delayed signal fed back into the effect.",
          "min": 0.0,
          "max": 0.99
        },
        {
          "name": "mix",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Mix",
          "description": "Mix between the dry (original) and wet (delayed) signals.",
          "min": 0.0,
          "max": 1.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "delay_seconds",
        "feedback",
        "mix"
      ],
      "is_dynamic": false
    },
    {
      "title": "Distortion",
      "description": "Applies a distortion effect to an audio file.\n    audio, effect, distortion\n\n    Use cases:\n    - Add grit and character to instruments\n    - Create aggressive sound effects\n    - Simulate overdriven amplifiers",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.Distortion",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "drive_db",
          "type": {
            "type": "float"
          },
          "default": 25.0,
          "title": "Drive Db",
          "description": "Amount of distortion to apply in decibels.",
          "min": 0.0,
          "max": 100.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "drive_db"
      ],
      "is_dynamic": false
    },
    {
      "title": "Gain",
      "description": "Applies a gain (volume adjustment) to an audio file.\n    audio, effect, volume\n\n    Use cases:\n    - Increase or decrease overall volume of audio\n    - Balance levels between different audio tracks\n    - Prepare audio for further processing",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.Gain",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "gain_db",
          "type": {
            "type": "float"
          },
          "default": 0.0,
          "title": "Gain Db",
          "description": "Gain to apply in decibels. Positive values increase volume, negative values decrease it.",
          "min": -60.0,
          "max": 24.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "gain_db"
      ],
      "is_dynamic": false
    },
    {
      "title": "High Pass Filter",
      "description": "Applies a high-pass filter to attenuate frequencies below a cutoff point.\n    audio, effect, equalizer\n\n    Use cases:\n    - Remove low-frequency rumble or noise\n    - Clean up the low end of a mix\n    - Create filter sweep effects",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.HighPassFilter",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "cutoff_frequency_hz",
          "type": {
            "type": "float"
          },
          "default": 80.0,
          "title": "Cutoff Frequency Hz",
          "description": "The cutoff frequency of the high-pass filter in Hz.",
          "min": 20.0,
          "max": 5000.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "cutoff_frequency_hz"
      ],
      "is_dynamic": false
    },
    {
      "title": "High Shelf Filter",
      "description": "Applies a high shelf filter to boost or cut high frequencies.\n    audio, effect, equalizer\n\n    Use cases:\n    - Enhance or reduce treble frequencies\n    - Add brightness or air to audio\n    - Tame harsh high frequencies",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.HighShelfFilter",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "cutoff_frequency_hz",
          "type": {
            "type": "float"
          },
          "default": 5000.0,
          "title": "Cutoff Frequency Hz",
          "description": "The cutoff frequency of the shelf filter in Hz.",
          "min": 1000.0,
          "max": 20000.0
        },
        {
          "name": "gain_db",
          "type": {
            "type": "float"
          },
          "default": 0.0,
          "title": "Gain Db",
          "description": "The gain to apply to the frequencies above the cutoff, in dB.",
          "min": -24.0,
          "max": 24.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "cutoff_frequency_hz",
        "gain_db"
      ],
      "is_dynamic": false
    },
    {
      "title": "Limiter",
      "description": "Applies a limiter effect to an audio file.\n    audio, effect, dynamics\n\n    Use cases:\n    - Prevent audio clipping\n    - Increase perceived loudness without distortion\n    - Control dynamic range of audio",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.Limiter",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "threshold_db",
          "type": {
            "type": "float"
          },
          "default": -2.0,
          "title": "Threshold Db",
          "description": "Threshold in dB above which the limiter is applied.",
          "min": -60.0,
          "max": 0.0
        },
        {
          "name": "release_ms",
          "type": {
            "type": "float"
          },
          "default": 250.0,
          "title": "Release Ms",
          "description": "Release time in milliseconds.",
          "min": 1.0,
          "max": 1000.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "threshold_db",
        "release_ms"
      ],
      "is_dynamic": false
    },
    {
      "title": "Low Pass Filter",
      "description": "Applies a low-pass filter to attenuate frequencies above a cutoff point.\n    audio, effect, equalizer\n\n    Use cases:\n    - Reduce high-frequency harshness\n    - Simulate muffled or distant sounds\n    - Create dub-style effects",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.LowPassFilter",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "cutoff_frequency_hz",
          "type": {
            "type": "float"
          },
          "default": 5000.0,
          "title": "Cutoff Frequency Hz",
          "description": "The cutoff frequency of the low-pass filter in Hz.",
          "min": 500.0,
          "max": 20000.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "cutoff_frequency_hz"
      ],
      "is_dynamic": false
    },
    {
      "title": "Low Shelf Filter",
      "description": "Applies a low shelf filter to boost or cut low frequencies.\n    audio, effect, equalizer\n\n    Use cases:\n    - Enhance or reduce bass frequencies\n    - Shape the low-end response of audio\n    - Compensate for speaker or room deficiencies",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.LowShelfFilter",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "cutoff_frequency_hz",
          "type": {
            "type": "float"
          },
          "default": 200.0,
          "title": "Cutoff Frequency Hz",
          "description": "The cutoff frequency of the shelf filter in Hz.",
          "min": 20.0,
          "max": 1000.0
        },
        {
          "name": "gain_db",
          "type": {
            "type": "float"
          },
          "default": 0.0,
          "title": "Gain Db",
          "description": "The gain to apply to the frequencies below the cutoff, in dB.",
          "min": -24.0,
          "max": 24.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "cutoff_frequency_hz",
        "gain_db"
      ],
      "is_dynamic": false
    },
    {
      "title": "Noise Gate",
      "description": "Applies a noise gate effect to an audio file.\n    audio, effect, dynamics\n\n    Use cases:\n    - Reduce background noise in recordings\n    - Clean up audio tracks with unwanted low-level sounds\n    - Create rhythmic effects by gating sustained sounds",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.NoiseGate",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "threshold_db",
          "type": {
            "type": "float"
          },
          "default": -50.0,
          "title": "Threshold Db",
          "description": "Threshold in dB below which the gate is active.",
          "min": -90.0,
          "max": 0.0
        },
        {
          "name": "attack_ms",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Attack Ms",
          "description": "Attack time in milliseconds.",
          "min": 0.1,
          "max": 100.0
        },
        {
          "name": "release_ms",
          "type": {
            "type": "float"
          },
          "default": 100.0,
          "title": "Release Ms",
          "description": "Release time in milliseconds.",
          "min": 5.0,
          "max": 1000.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "threshold_db",
        "attack_ms",
        "release_ms"
      ],
      "is_dynamic": false
    },
    {
      "title": "Peak Filter",
      "description": "Applies a peak filter to boost or cut a specific frequency range.\n    audio, effect, equalizer\n\n    Use cases:\n    - Isolate specific frequency ranges\n    - Create telephone or radio voice effects\n    - Focus on particular instrument ranges in a mix",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.PeakFilter",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "cutoff_frequency_hz",
          "type": {
            "type": "float"
          },
          "default": 1000.0,
          "title": "Cutoff Frequency Hz",
          "description": "The cutoff frequency of the band-pass filter in Hz.",
          "min": 20.0,
          "max": 20000.0
        },
        {
          "name": "q_factor",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Q Factor",
          "description": "The Q factor, determining the width of the band. Higher values create narrower bands.",
          "min": 0.1,
          "max": 10.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "cutoff_frequency_hz",
        "q_factor"
      ],
      "is_dynamic": false
    },
    {
      "title": "Phaser",
      "description": "Applies a phaser effect to an audio file.\n    audio, effect, modulation\n\n    Use cases:\n    - Create sweeping, swooshing sounds\n    - Add movement to static sounds\n    - Produce psychedelic or space-like effects",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.Phaser",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "rate_hz",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Rate Hz",
          "description": "Rate of the phaser effect in Hz.",
          "min": 0.1,
          "max": 10.0
        },
        {
          "name": "depth",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Depth",
          "description": "Depth of the phaser effect.",
          "min": 0.0,
          "max": 1.0
        },
        {
          "name": "centre_frequency_hz",
          "type": {
            "type": "float"
          },
          "default": 1300.0,
          "title": "Centre Frequency Hz",
          "description": "Centre frequency of the phaser in Hz.",
          "min": 100.0,
          "max": 5000.0
        },
        {
          "name": "feedback",
          "type": {
            "type": "float"
          },
          "default": 0.0,
          "title": "Feedback",
          "description": "Feedback of the phaser effect. Negative values invert the phase.",
          "min": -1.0,
          "max": 1.0
        },
        {
          "name": "mix",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Mix",
          "description": "Mix between the dry (original) and wet (effected) signals.",
          "min": 0.0,
          "max": 1.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "rate_hz",
        "depth",
        "centre_frequency_hz",
        "feedback",
        "mix"
      ],
      "is_dynamic": false
    },
    {
      "title": "Pitch Shift",
      "description": "Shifts the pitch of an audio file without changing its duration.\n    audio, effect, pitch\n\n    Use cases:\n    - Transpose audio to a different key\n    - Create harmonies or vocal effects\n    - Adjust instrument tuning",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.PitchShift",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "semitones",
          "type": {
            "type": "float"
          },
          "default": 0.0,
          "title": "Semitones",
          "description": "Number of semitones to shift the pitch. Positive values shift up, negative values shift down.",
          "min": -12.0,
          "max": 12.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "semitones"
      ],
      "is_dynamic": false
    },
    {
      "title": "Reverb",
      "description": "Applies a reverb effect to an audio file.\n    audio, effect, reverb\n\n    Use cases:\n    - Add spatial depth to dry recordings\n    - Simulate different room acoustics\n    - Create atmospheric sound effects",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.Reverb",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "room_scale",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Room Scale",
          "description": "Size of the simulated room. Higher values create larger spaces.",
          "min": 0.0,
          "max": 1.0
        },
        {
          "name": "damping",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Damping",
          "description": "Amount of high frequency absorption. Higher values create a duller sound.",
          "min": 0.0,
          "max": 1.0
        },
        {
          "name": "wet_level",
          "type": {
            "type": "float"
          },
          "default": 0.15,
          "title": "Wet Level",
          "description": "Level of the reverb effect in the output.",
          "min": 0.0,
          "max": 1.0
        },
        {
          "name": "dry_level",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Dry Level",
          "description": "Level of the original signal in the output.",
          "min": 0.0,
          "max": 1.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "room_scale",
        "damping",
        "wet_level",
        "dry_level"
      ],
      "is_dynamic": false
    },
    {
      "title": "Time Stretch",
      "description": "Changes the speed of an audio file without altering its pitch.\n    audio, transform, time\n\n    Use cases:\n    - Adjust audio duration to fit video length\n    - Create slow-motion or fast-motion audio effects\n    - Synchronize audio tracks of different lengths",
      "namespace": "lib.pedalboard",
      "node_type": "lib.pedalboard.TimeStretch",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio file to process."
        },
        {
          "name": "rate",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Rate",
          "description": "Time stretch factor. Values > 1 speed up, < 1 slow down.",
          "min": 0.5,
          "max": 2.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "rate"
      ],
      "is_dynamic": false
    },
    {
      "title": "Envelope",
      "description": "Applies an ADR (Attack-Decay-Release) envelope to an audio signal.\n    audio, synthesis, envelope\n\n    Use cases:\n    - Shape the amplitude of synthesized sounds\n    - Create percussion-like instruments\n    - Control sound dynamics",
      "namespace": "lib.synthesis",
      "node_type": "lib.synthesis.Envelope",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The audio to apply the envelope to."
        },
        {
          "name": "attack",
          "type": {
            "type": "float"
          },
          "default": 0.1,
          "title": "Attack",
          "description": "Attack time in seconds.",
          "min": 0.0,
          "max": 5.0
        },
        {
          "name": "decay",
          "type": {
            "type": "float"
          },
          "default": 0.3,
          "title": "Decay",
          "description": "Decay time in seconds.",
          "min": 0.0,
          "max": 5.0
        },
        {
          "name": "release",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Release",
          "description": "Release time in seconds.",
          "min": 0.0,
          "max": 5.0
        },
        {
          "name": "peak_amplitude",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Peak Amplitude",
          "description": "Peak amplitude after attack phase (0-1).",
          "min": 0.0,
          "max": 1.0
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "attack",
        "decay",
        "release",
        "peak_amplitude"
      ],
      "is_dynamic": false
    },
    {
      "title": "FM Synthesis",
      "description": "Performs FM (Frequency Modulation) synthesis.\n    audio, synthesis, modulation\n\n    Use cases:\n    - Create complex timbres\n    - Generate bell-like sounds\n    - Synthesize metallic tones",
      "namespace": "lib.synthesis",
      "node_type": "lib.synthesis.FM_Synthesis",
      "layout": "default",
      "properties": [
        {
          "name": "carrier_freq",
          "type": {
            "type": "float"
          },
          "default": 440.0,
          "title": "Carrier Freq",
          "description": "Carrier frequency in Hz.",
          "min": 20.0,
          "max": 20000.0
        },
        {
          "name": "modulator_freq",
          "type": {
            "type": "float"
          },
          "default": 110.0,
          "title": "Modulator Freq",
          "description": "Modulator frequency in Hz.",
          "min": 1.0,
          "max": 20000.0
        },
        {
          "name": "modulation_index",
          "type": {
            "type": "float"
          },
          "default": 5.0,
          "title": "Modulation Index",
          "description": "Modulation index (affects richness of sound).",
          "min": 0.0,
          "max": 100.0
        },
        {
          "name": "amplitude",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Amplitude",
          "description": "Amplitude of the output.",
          "min": 0.0,
          "max": 1.0
        },
        {
          "name": "duration",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Duration",
          "description": "Duration in seconds.",
          "min": 0.0,
          "max": 30.0
        },
        {
          "name": "sample_rate",
          "type": {
            "type": "int"
          },
          "default": 44100,
          "title": "Sample Rate",
          "description": "Sampling rate in Hz."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "carrier_freq",
        "modulator_freq",
        "modulation_index",
        "amplitude",
        "duration",
        "sample_rate"
      ],
      "is_dynamic": false
    },
    {
      "title": "Oscillator",
      "description": "Generates basic waveforms (sine, square, sawtooth, triangle).\n    audio, synthesis, waveform\n\n    Use cases:\n    - Create fundamental waveforms for synthesis\n    - Generate test signals\n    - Build complex sounds from basic waves",
      "namespace": "lib.synthesis",
      "node_type": "lib.synthesis.Oscillator",
      "layout": "default",
      "properties": [
        {
          "name": "waveform",
          "type": {
            "type": "enum",
            "values": [
              "sine",
              "square",
              "sawtooth",
              "triangle"
            ],
            "type_name": "nodetool.nodes.lib.synthesis.OscillatorWaveform"
          },
          "default": "sine",
          "title": "Waveform",
          "description": "Type of waveform to generate (sine, square, sawtooth, triangle)."
        },
        {
          "name": "frequency",
          "type": {
            "type": "float"
          },
          "default": 440.0,
          "title": "Frequency",
          "description": "Frequency of the waveform in Hz.",
          "min": 20.0,
          "max": 20000.0
        },
        {
          "name": "amplitude",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Amplitude",
          "description": "Amplitude of the waveform.",
          "min": 0.0,
          "max": 1.0
        },
        {
          "name": "duration",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Duration",
          "description": "Duration in seconds.",
          "min": 0.0,
          "max": 30.0
        },
        {
          "name": "sample_rate",
          "type": {
            "type": "int"
          },
          "default": 44100,
          "title": "Sample Rate",
          "description": "Sampling rate in Hz."
        },
        {
          "name": "pitch_envelope_amount",
          "type": {
            "type": "float"
          },
          "default": 0.0,
          "title": "Pitch Envelope Amount",
          "description": "Amount of pitch envelope in semitones",
          "min": -24.0,
          "max": 24.0
        },
        {
          "name": "pitch_envelope_time",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Pitch Envelope Time",
          "description": "Duration of pitch envelope in seconds",
          "min": 0.0,
          "max": 10.0
        },
        {
          "name": "pitch_envelope_curve",
          "type": {
            "type": "enum",
            "values": [
              "linear",
              "exponential"
            ],
            "type_name": "nodetool.nodes.lib.synthesis.PitchEnvelopeCurve"
          },
          "default": "linear",
          "title": "Pitch Envelope Curve",
          "description": "Shape of pitch envelope (linear, exponential)"
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "waveform",
        "frequency",
        "amplitude",
        "duration",
        "sample_rate",
        "pitch_envelope_amount",
        "pitch_envelope_time",
        "pitch_envelope_curve"
      ],
      "is_dynamic": false
    },
    {
      "title": "Pink Noise",
      "description": "Generates pink noise (1/f noise).\n    audio, synthesis, noise\n\n    Use cases:\n    - Create natural-sounding background noise\n    - Test speaker response\n    - Sound masking",
      "namespace": "lib.synthesis",
      "node_type": "lib.synthesis.PinkNoise",
      "layout": "default",
      "properties": [
        {
          "name": "amplitude",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Amplitude",
          "description": "Amplitude of the noise.",
          "min": 0.0,
          "max": 1.0
        },
        {
          "name": "duration",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Duration",
          "description": "Duration in seconds.",
          "min": 0.0,
          "max": 30.0
        },
        {
          "name": "sample_rate",
          "type": {
            "type": "int"
          },
          "default": 44100,
          "title": "Sample Rate",
          "description": "Sampling rate in Hz."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "amplitude",
        "duration",
        "sample_rate"
      ],
      "is_dynamic": false
    },
    {
      "title": "White Noise",
      "description": "Generates white noise.\n    audio, synthesis, noise\n\n    Use cases:\n    - Create background ambience\n    - Generate percussion sounds\n    - Test audio equipment",
      "namespace": "lib.synthesis",
      "node_type": "lib.synthesis.WhiteNoise",
      "layout": "default",
      "properties": [
        {
          "name": "amplitude",
          "type": {
            "type": "float"
          },
          "default": 0.5,
          "title": "Amplitude",
          "description": "Amplitude of the noise.",
          "min": 0.0,
          "max": 1.0
        },
        {
          "name": "duration",
          "type": {
            "type": "float"
          },
          "default": 1.0,
          "title": "Duration",
          "description": "Duration in seconds.",
          "min": 0.0,
          "max": 30.0
        },
        {
          "name": "sample_rate",
          "type": {
            "type": "int"
          },
          "default": 44100,
          "title": "Sample Rate",
          "description": "Sampling rate in Hz."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "audio"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "amplitude",
        "duration",
        "sample_rate"
      ],
      "is_dynamic": false
    },
    {
      "title": "Detect Onsets",
      "description": "Detect onsets in an audio file.\n    audio, analysis, segmentation\n\n    Use cases:\n    - Identify beat locations in music\n    - Segment audio based on changes in energy or spectral content\n    - Prepare audio for further processing or analysis",
      "namespace": "lib.librosa.segmentation",
      "node_type": "lib.librosa.segmentation.DetectOnsets",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The input audio file to analyze."
        },
        {
          "name": "hop_length",
          "type": {
            "type": "int"
          },
          "default": 512,
          "title": "Hop Length",
          "description": "Number of samples between successive frames."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "np_array"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "hop_length"
      ],
      "is_dynamic": false
    },
    {
      "title": "Save Audio Segments",
      "description": "Save a list of audio segments to a specified folder.\n    audio, save, export\n\n    Use cases:\n    - Export segmented audio files for further processing or analysis\n    - Create a dataset of audio clips from a longer recording\n    - Organize audio segments into a structured format",
      "namespace": "lib.librosa.segmentation",
      "node_type": "lib.librosa.segmentation.SaveAudioSegments",
      "layout": "default",
      "properties": [
        {
          "name": "segments",
          "type": {
            "type": "list",
            "type_args": [
              {
                "type": "audio"
              }
            ]
          },
          "default": [],
          "title": "Segments",
          "description": "The list of audio segments to save."
        },
        {
          "name": "output_folder",
          "type": {
            "type": "folder"
          },
          "default": {},
          "title": "Output Folder",
          "description": "The folder to save the audio segments in."
        },
        {
          "name": "name_prefix",
          "type": {
            "type": "str"
          },
          "default": "segment",
          "title": "Name Prefix",
          "description": "Prefix for the saved audio file names."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "folder"
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "segments",
        "output_folder",
        "name_prefix"
      ],
      "is_dynamic": false
    },
    {
      "title": "Segment Audio By Onsets",
      "description": "Segment an audio file based on detected onsets.\n    audio, segmentation, processing\n\n    Use cases:\n    - Split a long audio recording into individual segments\n    - Prepare audio clips for further analysis or processing\n    - Extract specific parts of an audio file based on onset locations",
      "namespace": "lib.librosa.segmentation",
      "node_type": "lib.librosa.segmentation.SegmentAudioByOnsets",
      "layout": "default",
      "properties": [
        {
          "name": "audio",
          "type": {
            "type": "audio"
          },
          "default": {},
          "title": "Audio",
          "description": "The input audio file to segment."
        },
        {
          "name": "onsets",
          "type": {
            "type": "np_array"
          },
          "default": {},
          "title": "Onsets",
          "description": "The onset times detected in the audio."
        },
        {
          "name": "min_segment_length",
          "type": {
            "type": "float"
          },
          "default": 0.1,
          "title": "Min Segment Length",
          "description": "Minimum length of a segment in seconds."
        }
      ],
      "outputs": [
        {
          "type": {
            "type": "list",
            "type_args": [
              {
                "type": "audio"
              }
            ]
          },
          "name": "output"
        }
      ],
      "the_model_info": {},
      "recommended_models": [],
      "basic_fields": [
        "audio",
        "onsets",
        "min_segment_length"
      ],
      "is_dynamic": false
    }
  ],
  "assets": [
    {
      "package_name": "nodetool-lib-audio",
      "name": "Segment Audio.jpg",
      "path": ""
    }
  ],
  "examples": [
    {
      "id": "fb81e4def50511efb8e900003278d4da",
      "name": "Segment Audio",
      "description": "This example demonstrates how to automatically segment an audio file based on detected onsets (sudden changes in audio intensity). The workflow first loads an audio file, then uses librosa's onset detection to identify points where new sounds begin. These onset points are used to slice the original audio into separate segments, which are then saved as individual files. This technique is useful for breaking down longer audio recordings into meaningful chunks for further processing, analysis, or organization. Common applications include splitting music into individual notes, separating speech into words or phrases, or isolating sound effects from a continuous recording.",
      "tags": [
        "audio"
      ]
    }
  ]
}